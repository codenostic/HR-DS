# -*- coding: utf-8 -*-
"""
Created on Thu Feb  2 18:21:04 2017

@author: bhupeshgupta
"""
import itertools
import operator
import time

def timing(f):
    def wrap(*args):
        time1 = time.time()
        ret = f(*args)
        time2 = time.time()
        print ('%s function took %0.3f ms' % (f.__name__ , (time2-time1)*1000.0))
        return ret
    return wrap

def get_possible_C3C2(coins_dict, CTotal, N):
    node_tree_coins = coins_dict
    sorted_coins = sorted(node_tree_coins.items(), key=operator.itemgetter(1))
    group = itertools.groupby(sorted_coins, lambda x: x[1])
    coins_node_groups = []
    for key, nodes in group:
        coins_node_groups.append((key, [node[0] for node in nodes]))
    coin_node_dict = dict(coins_node_groups)
    possible_C3C2 = []
    if (CTotal%2 == 0) and  ((CTotal//2) in coin_node_dict.keys()) and len(coin_node_dict[CTotal//2]) == 2:
        C2 = CTotal//2 
        possible_C3C2.append({'C2':(C2, coin_node_dict[C2]), 'C3': (0, [()])})
    for C3 in coin_node_dict.keys():
        C2 = (CTotal - C3)//2
        if C2 not in coin_node_dict.keys():
            continue
        elif C3 >= C2:
            continue
        else:
            if len(coin_node_dict[C2]) >= 2 and ((2*C2 + C3) == CTotal):
                possible_C3C2.append({'C2':(C2, coin_node_dict[C2]), 'C3': (C3, coin_node_dict[C3])})

    return possible_C3C2

def valid_C2s(C3_Tree, C2_Trees_List):
    valid_C2s = []
    for C2_Tree in C2_Trees_List:
        if len(set(C2_Tree) - (set(C2_Tree)-set(C3_Tree))) == 0:
            valid_C2s.append(C2_Tree)
    return valid_C2s

def exclusive_tree(C2_Tree, C2_Trees_List):
        for item in C2_Trees_List:
            if len(set(item) - (set(item)- set(C2_Tree))) == 0:
                return item
            else:
                return ()
@timing
def solution(N, CTotal, Coin_Dict):
    '''    
    We have Coins_Dict, CTotal and N, number of nodes 
    Objective - find valid combination of 2 C2 Trees and 1 C3 Tree, which satisfy the below conditions
    first 2C2 + C3 = CTotal, Second C3 < C2, -> these will give a possible solution
    We need to make sure this is valid also, that means 
    One, none of the nodes in 2 C2 Trees and 1 C3 Tree overlap
    Two, combining Nodes in 2 C2 Trees and 1 C3 Tree should be equal to N
    
    Main Steps of our solution
    
    Sort Coin_Dict by number of Coins
    Next Group Trees by number of coins - Store in Coin_Group_Dict
    for C3 going from CTotal//3 + 1 to 0 and available in Coin_Group_Dict
    Calculate C2 = (CTotal-C3)//2 
    First Check if 2*C2 + C3 == CTotal, if yes then go below else continue
    Check if C2 is available in Coin_Group_Dict, if yes then 
    Get C3_Trees_List and C2_Trees_List -> may be possible solution
    for a C3_Tree in C3 Trees_list -> get a list of Valid_C2's 
    if this list is > 2 -> then for a C2_Tree in Valid_C2's get C2_Tree_Exclusive with no overlap
    if nodes in C3_Tree + C2_Tree + C2_Tree_Exclusive == N then return C3-C2
    if for all C3's we donot get any answer then check a special case where CTotal%2 == 0 and CTotal//2 is available  in Coin_Dict
    if yes then validate C2's like above and return CTotal//2 else -1 ( we deal with the special usecase first)
    '''   
    # Sort Coin_Dict to get sorted_coin_dict
    sorted_coins_dict = sorted(Coin_Dict, key = operator.itemgetter(1))
    
#    print(sorted_coins_dict)
    # use group by to make groups of trees with similar coins weightage
    # now we have a dictionary with groups of trees based on coins in ascending order mostly 
    #( we can do descending but that not necessary as dict reference is O(1))
    # Lets do till here and see what we get 
    group = itertools.groupby(sorted_coins_dict, key = operator.itemgetter(1))
    coins_node_groups = []
    for key, nodes in group:
        coins_node_groups.append((key, [node[0] for node in nodes]))
    coins_group_dict = dict(coins_node_groups)
    # we will add special case in dict i.e. when C3 == 0 then we dont need to deal with special case specifically
    coins_group_dict[0] = []    
#    print(coins_group_dict)
    # no we run the for loop for C3 from C3Max i.e. CTotal//3 to 0 
    for C3 in range((CTotal//3 + 1), -1, -1):    
    #first lets check if C3 exists in dict keys if yes then calculate C2 
        if C3 not in coins_group_dict.keys():
            continue
        elif ((2*((CTotal - C3)//2) + C3) != CTotal) or (((CTotal - C3)//2) not in coins_group_dict.keys()):
            continue
    # check 2*C2 + C3 == CTotal and C2 in dict Keys.
        else:
    #If yes then get C3_Tree_List and C2_Tree_List 
            C2 = ((CTotal - C3)//2)
#            print(C3)
#            print(list(coins_group_dict[C3]))
            C3_Trees_List = list(coins_group_dict[C3])
            C2_Trees_List = list(coins_group_dict[C2])
#            print(C3_Trees_List, C2_Trees_List)
    # now for each element of C3_Tree_List - lets say C3_Tree check possible C2_Trees without overalpping nodes
            for C3_Tree in C3_Trees_List:
                possible_C2_Trees = valid_C2s(C3_Tree, C2_Trees_List)
#                print(C3, C3_Tree, possible_C2_Trees)
    # for a C2_Tree in possible_C2_Trees check if we get a C2_Tree_Exclusive where no common node
                if len(possible_C2_Trees) < 2:
                    continue
                else:
                    for C2_Tree in possible_C2_Trees:
                        
    # if yes then check C3_Tree+ C2_Tree+ C2_Tree_Exclusive == N
                        exclusive_C2_Tree = exclusive_tree(C2_Tree,C2_Trees_List)
#                        print(C2_Tree,C2_Trees_List, exclusive_C2_Tree)
                        complete_set = set()
                        complete_set.update(C3_Tree)
                        complete_set.update(C2_Tree)
                        complete_set.update(exclusive_C2_Tree)
                        if len(complete_set) == N:
    #if yes, return C3-C2 
                            return C2-C3
    return -1
# Test cases Input here 
    

N1 = 6 
CTotal_N1 = 21
Coin_Dict_N1 = [((5,), 1), ((4,), 1), ((6,), 1), ((3,), 4), ((1,), 7), ((2,), 7), \
((4, 2), 8), ((6, 2), 8), ((5, 2), 8), ((6, 5, 2), 9), ((6, 4, 2), 9), ((5, 4, 2), 9), \
((6, 5, 4, 2), 10), ((3, 1), 11), ((2, 1), 14), ((5, 2, 1), 15), ((6, 2, 1), 15), ((4, 2, 1), 15), \
((5, 4, 2, 1), 16), ((6, 5, 2, 1), 16), ((6, 4, 2, 1), 16), ((6, 5, 4, 2, 1), 17), ((3, 2, 1), 18),\
 ((3, 5, 2, 1), 19), ((3, 4, 2, 1), 19), ((3, 6, 2, 1), 19), ((3, 6, 5, 2, 1), 20), \
 ((3, 5, 4, 2, 1), 20), ((3, 6, 4, 2, 1), 20), ((3, 6, 5, 4, 2, 1), 21)]

N2 = 8
CTotal_N2 = 53
Coin_Dict_N2 = [((3,), 1), ((1,), 1), ((2,), 1), ((2, 1), 2), ((3, 2), 2), ((3, 2, 1), 3), \
((7,), 5), ((8,), 6), ((8, 1), 7), ((8, 2, 1), 8), ((8, 3, 2, 1), 9), ((5,), 10), ((7, 8), 11), \
((6,), 11), ((7, 8, 1), 12), ((7, 8, 2, 1), 13), ((7, 8, 3, 2, 1), 14), ((5, 7), 15), ((6, 7), 16), \
((4,), 18), ((4, 1), 19), ((4, 2, 1), 20), ((5, 7, 8), 21), ((4, 3, 2, 1), 21), ((5, 7, 8, 1), 22), \
((6, 7, 8), 22), ((5, 7, 8, 2, 1), 23), ((6, 7, 8, 1), 23), ((6, 7, 8, 2, 1), 24), \
((5, 7, 8, 3, 2, 1), 24), ((6, 7, 8, 3, 2, 1), 25), ((8, 4, 1), 25), ((5, 6, 7), 26), \
((8, 4, 2, 1), 26), ((8, 4, 3, 2, 1), 27), ((7, 8, 4, 1), 30), ((7, 8, 4, 2, 1), 31), \
((7, 8, 4, 3, 2, 1), 32), ((5, 6, 7, 8), 32), ((5, 6, 7, 8, 1), 33), ((5, 6, 7, 8, 2, 1), 34), \
((5, 6, 7, 8, 3, 2, 1), 35), ((5, 7, 8, 4, 1), 40), ((6, 7, 8, 4, 1), 41), ((5, 7, 8, 4, 2, 1), 41), \
((6, 7, 8, 4, 2, 1), 42), ((5, 7, 8, 4, 3, 2, 1), 42), ((6, 7, 8, 4, 3, 2, 1), 43), \
((5, 6, 7, 8, 4, 1), 51), ((5, 6, 7, 8, 4, 2, 1), 52), ((5, 6, 7, 8, 4, 3, 2, 1), 53)] 

N3 = 6
CTotal_N3 = 77
Coin_Dict_N3 = [((2,), 7), ((6,), 10), ((3,), 11), ((1,), 12), ((4,), 17), ((3, 2), 18), ((2, 1), 19), ((5,), 20), ((4, 1), 29), ((3, 2, 1), 30), ((6, 5), 30), ((4, 2, 1), 36), ((5, 4), 37), ((6, 5, 4), 47), ((4, 3, 2, 1), 47), ((5, 4, 1), 49), ((5, 4, 2, 1), 56), ((6, 5, 4, 1), 59), ((6, 5, 4, 2, 1), 66), ((5, 4, 3, 2, 1), 67), ((6, 5, 4, 3, 2, 1), 77)] 

N4 = 8
CTotal_N4 = 40
Coin_Dict_N4 = [((3,), 1), ((2,), 4), ((6,), 4), ((7,), 5), ((3, 2), 5), ((8,), 5), ((4,), 5), ((5,), 6), ((1,), 10), ((8, 7), 10), ((6, 5), 10), ((5, 4), 11), ((7, 5), 11), ((2, 1), 14), ((7, 6, 5), 15), ((6, 5, 4), 15), ((4, 1), 15), ((3, 2, 1), 15), ((8, 7, 5), 16), ((7, 5, 4), 16), ((4, 2, 1), 19), ((7, 6, 5, 4), 20), ((8, 7, 6, 5), 20), ((4, 3, 2, 1), 20), ((5, 4, 1), 21), ((8, 7, 5, 4), 21), ((8, 7, 6, 5, 4), 25), ((6, 5, 4, 1), 25), ((5, 4, 2, 1), 25), ((5, 4, 3, 2, 1), 26), ((7, 5, 4, 1), 26), ((6, 5, 4, 2, 1), 29), ((6, 5, 4, 3, 2, 1), 30), ((7, 5, 4, 2, 1), 30), ((7, 6, 5, 4, 1), 30), ((7, 5, 4, 3, 2, 1), 31), ((8, 7, 5, 4, 1), 31), ((7, 6, 5, 4, 2, 1), 34), ((8, 7, 6, 5, 4, 1), 35), ((7, 6, 5, 4, 3, 2, 1), 35), ((8, 7, 5, 4, 2, 1), 35), ((8, 7, 5, 4, 3, 2, 1), 36), ((8, 7, 6, 5, 4, 2, 1), 39), ((8, 7, 6, 5, 4, 3, 2, 1), 40)] 

N5 = 6
CTotal_N5 = 594
Coin_Dict_N5 = [((5,), 98), ((6,), 98), ((3,), 99), ((4,), 99), ((1,), 100), ((2,), 100), ((6, 4), 197), ((5, 3), 197), ((3, 1), 199), ((4, 2), 199), ((2, 1), 200), ((5, 3, 1), 297), ((6, 4, 2), 297), ((4, 2, 1), 299), ((2, 3, 1), 299), ((6, 4, 2, 1), 397), ((2, 5, 3, 1), 397), ((4, 2, 3, 1), 398), ((6, 4, 2, 3, 1), 496), ((4, 2, 5, 3, 1), 496), ((6, 4, 2, 5, 3, 1), 594)]


N6 = 14 
CTotal_N6 = 130 
Coin_Dict_N6 = [((3,), 1), ((1,), 1), ((2,), 1), ((3, 2), 2), ((2, 1), 2), ((3, 2, 1), 3), ((7,), 5), \
((8,), 6), ((10,), 7), ((8, 1), 7), ((8, 2, 1), 8), ((8, 3, 2, 1), 9), ((14,), 10), ((5,), 10), \
((7, 8), 11), ((11,), 11), ((6,), 11), ((9,), 12), ((7, 8, 1), 12), ((9, 3), 13), ((7, 8, 2, 1), 13), \
((9, 3, 2), 14), ((7, 8, 3, 2, 1), 14), ((9, 3, 2, 1), 15), ((5, 7), 15), ((6, 7), 16), ((12,), 17), \
((4,), 18), ((11, 10), 18), ((4, 1), 19), ((10, 9), 19), ((10, 9, 3), 20), ((4, 2, 1), 20), \
((13,), 20), ((4, 3, 2, 1), 21), ((10, 9, 3, 2), 21), ((8, 9, 3, 2, 1), 21), ((5, 7, 8), 21), \
((5, 7, 8, 1), 22), ((6, 7, 8), 22), ((10, 9, 3, 2, 1), 22), ((5, 7, 8, 2, 1), 23), ((6, 7, 8, 1), 23), \
((5, 7, 8, 3, 2, 1), 24), ((6, 7, 8, 2, 1), 24), ((6, 7, 8, 3, 2, 1), 25), ((8, 4, 1), 25),\
 ((7, 8, 9, 3, 2, 1), 26), ((8, 4, 2, 1), 26), ((5, 6, 7), 26), ((8, 4, 3, 2, 1), 27), \
 ((8, 10, 9, 3, 2, 1), 28), ((12, 9), 29), ((11, 10, 9), 30), ((12, 9, 3), 30), ((7, 8, 4, 1), 30),\
 ((14, 13), 30), ((12, 9, 3, 2), 31), ((7, 8, 4, 2, 1), 31), ((11, 10, 9, 3), 31), ((11, 10, 9, 3, 2), 32),\
 ((5, 6, 7, 8), 32), ((12, 9, 3, 2, 1), 32), ((7, 8, 4, 3, 2, 1), 32), ((11, 10, 9, 3, 2, 1), 33), \
 ((7, 8, 10, 9, 3, 2, 1), 33), ((5, 6, 7, 8, 1), 33), ((4, 9, 3, 2, 1), 33), ((5, 6, 7, 8, 2, 1), 34),\
 ((5, 6, 7, 8, 3, 2, 1), 35), ((12, 10, 9), 36), ((5, 7, 8, 9, 3, 2, 1), 36), ((13, 12), 37), \
 ((12, 10, 9, 3), 37), ((6, 7, 8, 9, 3, 2, 1), 37), ((8, 12, 9, 3, 2, 1), 38), ((12, 10, 9, 3, 2), 38), \
 ((12, 10, 9, 3, 2, 1), 39), ((8, 11, 10, 9, 3, 2, 1), 39), ((8, 4, 9, 3, 2, 1), 39), \
 ((5, 7, 8, 4, 1), 40), ((4, 10, 9, 3, 2, 1), 40), ((6, 7, 8, 4, 1), 41), ((5, 7, 8, 4, 2, 1), 41), \
 ((6, 7, 8, 4, 2, 1), 42), ((5, 7, 8, 4, 3, 2, 1), 42), ((7, 8, 12, 9, 3, 2, 1), 43), \
 ((6, 7, 8, 4, 3, 2, 1), 43), ((5, 7, 8, 10, 9, 3, 2, 1), 43), ((7, 8, 11, 10, 9, 3, 2, 1), 44), \
 ((6, 7, 8, 10, 9, 3, 2, 1), 44), ((7, 8, 4, 9, 3, 2, 1), 44), ((8, 12, 10, 9, 3, 2, 1), 45), \
 ((8, 4, 10, 9, 3, 2, 1), 46), ((12, 11, 10, 9), 47), ((14, 13, 12), 47), ((5, 6, 7, 8, 9, 3, 2, 1), 47),\
 ((12, 11, 10, 9, 3), 48), ((13, 12, 9), 49), ((12, 11, 10, 9, 3, 2), 49), ((4, 12, 9, 3, 2, 1), 50), \
 ((12, 11, 10, 9, 3, 2, 1), 50), ((7, 8, 12, 10, 9, 3, 2, 1), 50), ((13, 12, 9, 3), 50), \
 ((5, 6, 7, 8, 4, 1), 51), ((4, 11, 10, 9, 3, 2, 1), 51), ((7, 8, 4, 10, 9, 3, 2, 1), 51), \
 ((13, 12, 9, 3, 2), 51), ((13, 12, 9, 3, 2, 1), 52), ((5, 6, 7, 8, 4, 2, 1), 52), \
 ((5, 7, 8, 12, 9, 3, 2, 1), 53), ((5, 6, 7, 8, 4, 3, 2, 1), 53), ((6, 7, 8, 12, 9, 3, 2, 1), 54), \
 ((5, 7, 8, 11, 10, 9, 3, 2, 1), 54), ((5, 6, 7, 8, 10, 9, 3, 2, 1), 54), ((5, 7, 8, 4, 9, 3, 2, 1), 54), \
 ((6, 7, 8, 4, 9, 3, 2, 1), 55), ((6, 7, 8, 11, 10, 9, 3, 2, 1), 55), ((8, 4, 12, 9, 3, 2, 1), 56),\
 ((8, 12, 11, 10, 9, 3, 2, 1), 56), ((13, 12, 10, 9), 56), ((13, 12, 10, 9, 3), 57), \
 ((8, 4, 11, 10, 9, 3, 2, 1), 57), ((4, 12, 10, 9, 3, 2, 1), 57), ((8, 13, 12, 9, 3, 2, 1), 58), \
 ((13, 12, 10, 9, 3, 2), 58), ((13, 12, 10, 9, 3, 2, 1), 59), ((14, 13, 12, 9), 59), \
 ((14, 13, 12, 9, 3), 60), ((5, 7, 8, 12, 10, 9, 3, 2, 1), 60), ((7, 8, 12, 11, 10, 9, 3, 2, 1), 61),\
 ((14, 13, 12, 9, 3, 2), 61), ((7, 8, 4, 12, 9, 3, 2, 1), 61), ((6, 7, 8, 12, 10, 9, 3, 2, 1), 61), \
 ((5, 7, 8, 4, 10, 9, 3, 2, 1), 61), ((6, 7, 8, 4, 10, 9, 3, 2, 1), 62), \
 ((7, 8, 4, 11, 10, 9, 3, 2, 1), 62), ((14, 13, 12, 9, 3, 2, 1), 62), ((8, 4, 12, 10, 9, 3, 2, 1), 63),\
 ((7, 8, 13, 12, 9, 3, 2, 1), 63), ((5, 6, 7, 8, 12, 9, 3, 2, 1), 64), \
 ((5, 6, 7, 8, 11, 10, 9, 3, 2, 1), 65), ((5, 6, 7, 8, 4, 9, 3, 2, 1), 65), \
 ((8, 13, 12, 10, 9, 3, 2, 1), 65), ((14, 13, 12, 10, 9), 66), ((14, 13, 12, 10, 9, 3), 67), \
 ((13, 12, 11, 10, 9), 67), ((14, 13, 12, 10, 9, 3, 2), 68), ((4, 12, 11, 10, 9, 3, 2, 1), 68), \
 ((7, 8, 4, 12, 10, 9, 3, 2, 1), 68), ((13, 12, 11, 10, 9, 3), 68), ((8, 14, 13, 12, 9, 3, 2, 1), 68), \
 ((14, 13, 12, 10, 9, 3, 2, 1), 69), ((13, 12, 11, 10, 9, 3, 2), 69), ((13, 12, 11, 10, 9, 3, 2, 1), 70), \
 ((4, 13, 12, 9, 3, 2, 1), 70), ((7, 8, 13, 12, 10, 9, 3, 2, 1), 70), \
 ((5, 7, 8, 12, 11, 10, 9, 3, 2, 1), 71), ((5, 6, 7, 8, 12, 10, 9, 3, 2, 1), 71), \
 ((5, 7, 8, 4, 12, 9, 3, 2, 1), 71), ((5, 7, 8, 4, 11, 10, 9, 3, 2, 1), 72), \
 ((6, 7, 8, 12, 11, 10, 9, 3, 2, 1), 72), ((6, 7, 8, 4, 12, 9, 3, 2, 1), 72), \
 ((5, 6, 7, 8, 4, 10, 9, 3, 2, 1), 72), ((5, 7, 8, 13, 12, 9, 3, 2, 1), 73), \
 ((7, 8, 14, 13, 12, 9, 3, 2, 1), 73), ((6, 7, 8, 4, 11, 10, 9, 3, 2, 1), 73), \
 ((8, 4, 12, 11, 10, 9, 3, 2, 1), 74), ((6, 7, 8, 13, 12, 9, 3, 2, 1), 74), \
 ((8, 14, 13, 12, 10, 9, 3, 2, 1), 75), ((8, 4, 13, 12, 9, 3, 2, 1), 76), \
 ((8, 13, 12, 11, 10, 9, 3, 2, 1), 76), ((4, 13, 12, 10, 9, 3, 2, 1), 77), \
 ((14, 13, 12, 11, 10, 9), 77), ((14, 13, 12, 11, 10, 9, 3), 78), ((5, 7, 8, 4, 12, 10, 9, 3, 2, 1), 78),\
 ((7, 8, 4, 12, 11, 10, 9, 3, 2, 1), 79), ((14, 13, 12, 11, 10, 9, 3, 2), 79), \
 ((6, 7, 8, 4, 12, 10, 9, 3, 2, 1), 79), ((5, 7, 8, 13, 12, 10, 9, 3, 2, 1), 80), \
 ((7, 8, 14, 13, 12, 10, 9, 3, 2, 1), 80), ((4, 14, 13, 12, 9, 3, 2, 1), 80), \
 ((14, 13, 12, 11, 10, 9, 3, 2, 1), 80), ((7, 8, 13, 12, 11, 10, 9, 3, 2, 1), 81), \
 ((7, 8, 4, 13, 12, 9, 3, 2, 1), 81), ((6, 7, 8, 13, 12, 10, 9, 3, 2, 1), 81), \
 ((5, 6, 7, 8, 12, 11, 10, 9, 3, 2, 1), 82), ((5, 6, 7, 8, 4, 12, 9, 3, 2, 1), 82), \
 ((8, 4, 13, 12, 10, 9, 3, 2, 1), 83), ((5, 7, 8, 14, 13, 12, 9, 3, 2, 1), 83), \
 ((5, 6, 7, 8, 4, 11, 10, 9, 3, 2, 1), 83), ((5, 6, 7, 8, 13, 12, 9, 3, 2, 1), 84), \
 ((6, 7, 8, 14, 13, 12, 9, 3, 2, 1), 84), ((8, 14, 13, 12, 11, 10, 9, 3, 2, 1), 86), \
 ((8, 4, 14, 13, 12, 9, 3, 2, 1), 86), ((4, 14, 13, 12, 10, 9, 3, 2, 1), 87), \
 ((4, 13, 12, 11, 10, 9, 3, 2, 1), 88), ((7, 8, 4, 13, 12, 10, 9, 3, 2, 1), 88), \
 ((5, 6, 7, 8, 4, 12, 10, 9, 3, 2, 1), 89), ((5, 7, 8, 4, 12, 11, 10, 9, 3, 2, 1), 89), \
 ((6, 7, 8, 4, 12, 11, 10, 9, 3, 2, 1), 90), ((5, 7, 8, 14, 13, 12, 10, 9, 3, 2, 1), 90), \
 ((5, 7, 8, 13, 12, 11, 10, 9, 3, 2, 1), 91), ((5, 6, 7, 8, 13, 12, 10, 9, 3, 2, 1), 91), \
 ((6, 7, 8, 14, 13, 12, 10, 9, 3, 2, 1), 91), ((7, 8, 14, 13, 12, 11, 10, 9, 3, 2, 1), 91), \
 ((5, 7, 8, 4, 13, 12, 9, 3, 2, 1), 91), ((7, 8, 4, 14, 13, 12, 9, 3, 2, 1), 91), \
 ((6, 7, 8, 13, 12, 11, 10, 9, 3, 2, 1), 92), ((6, 7, 8, 4, 13, 12, 9, 3, 2, 1), 92), \
 ((8, 4, 14, 13, 12, 10, 9, 3, 2, 1), 93), ((8, 4, 13, 12, 11, 10, 9, 3, 2, 1), 94), \
 ((5, 6, 7, 8, 14, 13, 12, 9, 3, 2, 1), 94), ((7, 8, 4, 14, 13, 12, 10, 9, 3, 2, 1), 98), \
 ((5, 7, 8, 4, 13, 12, 10, 9, 3, 2, 1), 98), ((4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 98), \
 ((6, 7, 8, 4, 13, 12, 10, 9, 3, 2, 1), 99), ((7, 8, 4, 13, 12, 11, 10, 9, 3, 2, 1), 99), \
 ((5, 6, 7, 8, 4, 12, 11, 10, 9, 3, 2, 1), 100), ((5, 7, 8, 14, 13, 12, 11, 10, 9, 3, 2, 1), 101), \
 ((5, 7, 8, 4, 14, 13, 12, 9, 3, 2, 1), 101), ((5, 6, 7, 8, 14, 13, 12, 10, 9, 3, 2, 1), 101), \
 ((5, 6, 7, 8, 13, 12, 11, 10, 9, 3, 2, 1), 102), ((5, 6, 7, 8, 4, 13, 12, 9, 3, 2, 1), 102), \
 ((6, 7, 8, 14, 13, 12, 11, 10, 9, 3, 2, 1), 102), ((6, 7, 8, 4, 14, 13, 12, 9, 3, 2, 1), 102), \
 ((8, 4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 104), ((5, 7, 8, 4, 14, 13, 12, 10, 9, 3, 2, 1), 108), \
 ((5, 6, 7, 8, 4, 13, 12, 10, 9, 3, 2, 1), 109), ((6, 7, 8, 4, 14, 13, 12, 10, 9, 3, 2, 1), 109), \
 ((7, 8, 4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 109), ((5, 7, 8, 4, 13, 12, 11, 10, 9, 3, 2, 1), 109), \
 ((6, 7, 8, 4, 13, 12, 11, 10, 9, 3, 2, 1), 110), ((5, 6, 7, 8, 14, 13, 12, 11, 10, 9, 3, 2, 1), 112), \
 ((5, 6, 7, 8, 4, 14, 13, 12, 9, 3, 2, 1), 112), ((5, 7, 8, 4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 119), \
 ((5, 6, 7, 8, 4, 14, 13, 12, 10, 9, 3, 2, 1), 119), ((5, 6, 7, 8, 4, 13, 12, 11, 10, 9, 3, 2, 1), 120), \
 ((6, 7, 8, 4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 120), ((5, 6, 7, 8, 4, 14, 13, 12, 11, 10, 9, 3, 2, 1), 130)]

N7 = 20
CTotal_N7 = 151


#output 
#print(solution(N1, CTotal_N1, Coin_Dict_N1))
#print(solution(N2, CTotal_N2, Coin_Dict_N2))
#print(solution(N3, CTotal_N3, Coin_Dict_N3))
#print(solution(N4, CTotal_N4, Coin_Dict_N4))
#print(solution(N5, CTotal_N5, Coin_Dict_N5))
#print(solution(N6, CTotal_N6, Coin_Dict_N6))
#print(solution(N7, CTotal_N7, Coin_Dict_N7))